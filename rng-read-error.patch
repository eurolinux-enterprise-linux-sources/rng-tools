diff -up ./rngd.c.readerror ./rngd.c
--- ./rngd.c.readerror	2017-08-29 12:22:30.495682031 -0400
+++ ./rngd.c	2017-08-29 12:22:47.217603776 -0400
@@ -265,8 +265,11 @@ static void do_loop(int random_step)
 				continue;	/* failed, no work */
 
 			retval = iter->xread(buf, sizeof buf, iter);
-			if (retval)
+			if (retval) {
+				message(LOG_DAEMON|LOG_ERR,
+					"Error reading from entropy source\n");
 				continue;	/* failed, no work */
+			}
 
 			work_done = true;
 
diff -up ./rngd_entsource.c.readerror ./rngd_entsource.c
--- ./rngd_entsource.c.readerror	2017-08-29 12:22:30.499682012 -0400
+++ ./rngd_entsource.c	2017-08-29 12:22:53.232575822 -0400
@@ -64,10 +64,8 @@ int xread(void *buf, size_t size, struct
 		size -= r;
 	}
 
-	if (size) {
-		message(LOG_DAEMON|LOG_ERR, "read error\n");
+	if (size)
 		return -1;
-	}
 	return 0;
 }
 
@@ -153,7 +151,7 @@ error_out:
 }
 
 /* Initialize entropy source */
-static int discard_initial_data(struct rng *ent_src)
+static int discard_initial_data(struct rng *ent_src, int *buf)
 {
 	/* Trash 32 bits of what is probably stale (non-random)
 	 * initial state from the RNG.  For Intel's, 8 bits would
@@ -165,10 +163,12 @@ static int discard_initial_data(struct r
 	xread(tempbuf, sizeof(tempbuf), ent_src);
 
 	/* Return 32 bits of bootstrap data */
-	xread(tempbuf, sizeof(tempbuf), ent_src);
+	if (xread(tempbuf, sizeof(tempbuf), ent_src) != 0)
+		return -1;
 
-	return tempbuf[0] | (tempbuf[1] << 8) |
+	*buf = tempbuf[0] | (tempbuf[1] << 8) |
 		(tempbuf[2] << 16) | (tempbuf[3] << 24);
+	return 0;
 }
 
 #define RNG_AVAIL "/sys/devices/virtual/misc/hw_random/rng_available"
@@ -180,6 +180,7 @@ int init_entropy_source(struct rng *ent_
 {
 	struct sysfs_attribute *rngavail;
 	char buf[16];
+	int bootstrap;
 
 	ent_src->rng_fd = open(ent_src->rng_name, O_RDONLY);
 	if (ent_src->rng_fd == -1) {
@@ -219,7 +220,11 @@ source_valid:
 	src_list_add(ent_src);
 	/* Bootstrap FIPS tests */
 	ent_src->fipsctx = malloc(sizeof(fips_ctx_t));
-	fips_init(ent_src->fipsctx, discard_initial_data(ent_src));
+	if (discard_initial_data(ent_src, &bootstrap) != 0) {
+		message(LOG_ERR|LOG_INFO, "Read failure in hwrng during bootstrap\n");
+		return 1;
+	}
+	fips_init(ent_src->fipsctx, bootstrap);
 	return 0;
 }
 
diff -up ./rngtest.c.readerror ./rngtest.c
--- ./rngtest.c.readerror	2014-04-01 01:03:31.000000000 -0400
+++ ./rngtest.c	2017-08-29 12:22:56.120562403 -0400
@@ -335,6 +335,7 @@ static int discard_initial_data(void)
 
 	return tempbuf[0] | (tempbuf[1] << 8) |
 		(tempbuf[2] << 16) | (tempbuf[3] << 24);
+
 }
 
 static void do_rng_fips_test_loop( void )
